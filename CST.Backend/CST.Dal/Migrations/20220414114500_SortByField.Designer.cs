// <auto-generated />
using System;
using System.Collections.Generic;
using CST.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CST.Dal.Migrations
{
    [DbContext(typeof(CstContext))]
    [Migration("20220414114500_SortByField")]
    partial class SortByField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CST.Common.Models.Domain.KeyNumberSetDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IncludeMailingsNumber")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeOpenRate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeRating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeReadTime")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("KeyNumberSet");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.LocationDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Timezone")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.MailingDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AverageScore")
                        .HasColumnType("numeric");

                    b.Property<List<string>>("ChanelApproversEmails")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeliveredCount")
                        .HasColumnType("integer");

                    b.Property<string>("DistributionGroupEmail")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<int>("FailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("FeedbackCommentsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Importance")
                        .HasColumnType("text");

                    b.Property<int>("LinkClicksCount")
                        .HasColumnType("integer");

                    b.Property<List<string>>("LocationApproversEmails")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("LocationExternalIds")
                        .HasColumnType("text[]");

                    b.Property<List<Guid>>("MailingLocations")
                        .HasColumnType("uuid[]");

                    b.Property<string>("MailingStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReadingTime1To3Seconds")
                        .HasColumnType("integer");

                    b.Property<int>("ReadingTime3To9Seconds")
                        .HasColumnType("integer");

                    b.Property<int>("ReadingTimeMore9Seconds")
                        .HasColumnType("integer");

                    b.Property<int>("RecipientsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SendOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChannelId");

                    b.ToTable("Mailing");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.MailingsApproversDomainEntity", b =>
                {
                    b.Property<Guid>("MailingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uuid");

                    b.HasKey("MailingId", "ApproverId");

                    b.HasIndex("ApproverId");

                    b.ToTable("MailingsApprovers");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.NotificationChannelDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActiveDirectoryGroupEmail")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("Approvers")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Brief")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSynchronizationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<Guid>>("LocationIds")
                        .HasColumnType("uuid[]");

                    b.Property<List<string>>("LocationNames")
                        .HasColumnType("text[]");

                    b.Property<List<Guid>>("LocationsTree")
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("MailSubscribers")
                        .HasColumnType("uuid[]");

                    b.Property<int>("MailSubscribersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("NotificationChannelApproverEmails")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("NotificationChannelLocationExternalIds")
                        .HasColumnType("text[]");

                    b.Property<Guid>("PersonalBlogOwner")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonalBlogOwnerEmail")
                        .HasColumnType("text");

                    b.Property<string>("PersonalBlogScope")
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("TeamsLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("TeamsSubscribers")
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.ToTable("NotificationChannel");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.ReportColumnSetDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IncludeAuthor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeClicks")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeComments")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeEmployees")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeLocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeName")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeNotificationChannel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeOpenRate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeRating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeReadTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeReopens")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeSendDate")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ReportColumnSet");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.ReportDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer");

                    b.Property<string>("GroupBy")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("MailingIds")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SortByField")
                        .HasColumnType("text");

                    b.Property<string>("SortOrder")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RequestDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("RequestFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequesterEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RequestFormDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpectedSendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkToFilesAtOnedrive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequesterEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("RequestForm");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RequestMessageDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SendOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestMessage");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RoleDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.ShownRequestToUserDomainEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RequestId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("ShownRequestToUser");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.UserDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("JobFunctionBase")
                        .HasColumnType("text");

                    b.Property<string>("JobLevel")
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("MccOpenedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NativeName")
                        .HasColumnType("text");

                    b.Property<string>("PrimarySkill")
                        .HasColumnType("text");

                    b.Property<int?>("TimeZone")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ManagerId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.UserRoleDomainEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("MailingDomainEntityReportDomainEntity", b =>
                {
                    b.Property<Guid>("MailingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportsId")
                        .HasColumnType("uuid");

                    b.HasKey("MailingsId", "ReportsId");

                    b.HasIndex("ReportsId");

                    b.ToTable("MailingReport", (string)null);
                });

            modelBuilder.Entity("CST.Common.Models.Domain.KeyNumberSetDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.ReportDomainEntity", "Report")
                        .WithOne("KeyNumberSet")
                        .HasForeignKey("CST.Common.Models.Domain.KeyNumberSetDomainEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.LocationDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.LocationDomainEntity", "ParentLocation")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.MailingDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.UserDomainEntity", "Author")
                        .WithMany("Mailings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CST.Common.Models.Domain.NotificationChannelDomainEntity", "Channel")
                        .WithMany("Mailings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.MailingsApproversDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.UserDomainEntity", "Approver")
                        .WithMany("MailingApprovers")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CST.Common.Models.Domain.MailingDomainEntity", "Mailing")
                        .WithMany("MailingsApprovers")
                        .HasForeignKey("MailingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Mailing");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.ReportColumnSetDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.ReportDomainEntity", "Report")
                        .WithOne("ReportColumnSet")
                        .HasForeignKey("CST.Common.Models.Domain.ReportColumnSetDomainEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RequestDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.UserDomainEntity", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RequestFormDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.RequestDomainEntity", "Request")
                        .WithOne("RequestForm")
                        .HasForeignKey("CST.Common.Models.Domain.RequestFormDomainEntity", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RequestMessageDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.RequestDomainEntity", "Request")
                        .WithMany("RequestMessage")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.ShownRequestToUserDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.RequestDomainEntity", "Request")
                        .WithMany("RequestReadingsByUser")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Common.Models.Domain.UserDomainEntity", "User")
                        .WithMany("ShownRequestsToUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.UserDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.LocationDomainEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Common.Models.Domain.UserDomainEntity", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Location");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.UserRoleDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.RoleDomainEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Common.Models.Domain.UserDomainEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MailingDomainEntityReportDomainEntity", b =>
                {
                    b.HasOne("CST.Common.Models.Domain.MailingDomainEntity", null)
                        .WithMany()
                        .HasForeignKey("MailingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Common.Models.Domain.ReportDomainEntity", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CST.Common.Models.Domain.MailingDomainEntity", b =>
                {
                    b.Navigation("MailingsApprovers");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.NotificationChannelDomainEntity", b =>
                {
                    b.Navigation("Mailings");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.ReportDomainEntity", b =>
                {
                    b.Navigation("KeyNumberSet");

                    b.Navigation("ReportColumnSet");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RequestDomainEntity", b =>
                {
                    b.Navigation("RequestForm");

                    b.Navigation("RequestMessage");

                    b.Navigation("RequestReadingsByUser");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.RoleDomainEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CST.Common.Models.Domain.UserDomainEntity", b =>
                {
                    b.Navigation("MailingApprovers");

                    b.Navigation("Mailings");

                    b.Navigation("ShownRequestsToUser");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
